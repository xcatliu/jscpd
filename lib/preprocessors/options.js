// Generated by CoffeeScript 1.12.7
(function() {
  var TokenizerFactory, _, fs, optionsPreprocessor, parseLanguagesExtensions, path, prepareOptions, readConfig, yaml,
    hasProp = {}.hasOwnProperty;

  _ = require("underscore");

  yaml = require('js-yaml');

  fs = require('fs');

  path = require('path');

  TokenizerFactory = require('../tokenizer/TokenizerFactory');

  prepareOptions = function(options, config) {
    var exts, key, lang, optionsNew, ref, value;
    optionsNew = _.extend(optionsPreprocessor["default"], config);
    for (key in options) {
      value = options[key];
      if (!(value === null)) {
        optionsNew[key] = value;
      }
    }
    if (optionsNew.hasOwnProperty('languages-exts')) {
      if (typeof optionsNew['languages-exts'] === 'string') {
        optionsNew['languages-exts'] = parseLanguagesExtensions(optionsNew['languages-exts']);
      }
      ref = optionsNew['languages-exts'];
      for (lang in ref) {
        if (!hasProp.call(ref, lang)) continue;
        exts = ref[lang];
        if (TokenizerFactory.prototype.LANGUAGES.hasOwnProperty(lang)) {
          TokenizerFactory.prototype.LANGUAGES[lang] = exts;
        }
      }
    }
    if (typeof optionsNew.languages === 'string') {
      optionsNew.languages = optionsNew.languages.split(',');
    }
    optionsNew.extensions = TokenizerFactory.prototype.getExtensionsByLanguages(optionsNew.languages);
    return optionsNew;
  };

  readConfig = function(file) {
    var doc, error;
    file = path.normalize(file);
    try {
      doc = yaml.safeLoad(fs.readFileSync(file, 'utf8'));
      doc.config_file = file;
      return doc;
    } catch (error1) {
      error = error1;
      return false;
    }
  };

  parseLanguagesExtensions = function(extensions) {
    var result;
    result = {};
    extensions.split(';').forEach(function(language) {
      var pair;
      pair = language.split(':');
      return result[pair[0]] = pair[1].split(',');
    });
    return result;
  };

  optionsPreprocessor = function(jscpd) {
    var config, options;
    if (jscpd.options.config != null) {
      config = readConfig(jscpd.options.config);
      if (!config) {
        throw new Error("JSCPD Error 02: can't read config file " + jscpd.options.config);
      }
      process.chdir(path.dirname(jscpd.options.config));
    } else {
      config = readConfig('.cpd.yaml') || readConfig('.cpd.yml') || {};
    }
    options = prepareOptions(jscpd.options, config);
    if (!path.isAbsolute(options.path || '')) {
      options.path = path.resolve(process.cwd(), options.path || '');
    }
    return jscpd.options = options;
  };

  optionsPreprocessor["default"] = {
    languages: Object.keys(TokenizerFactory.prototype.LANGUAGES),
    verbose: false,
    debug: false,
    files: null,
    exclude: null,
    "min-lines": 5,
    "min-tokens": 70,
    limit: 50,
    reporter: "xml"
  };

  module.exports = optionsPreprocessor;

}).call(this);
